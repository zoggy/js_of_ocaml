= Js_of_ocaml =

== Overview ==

Js_of_ocaml is a compiler from OCaml bytecode programs to JavaScript.
It makes it possible to write OCaml programs that run on Web browsers.
It is easy to install as it works with an existing installation of
OCaml, with no need to recompile any library.  It comes with bindings
for a large part of the browser APIs.  According to our benchmarks,
the generated programs <<a_manual chapter="performances" |runs
typically faster>> than with the OCaml bytecode interpreter.  We
believe this compiler will prove much easier to maintain than a
retargeted OCaml compiler, as the bytecode provides a very stable API.

== Requirements ==
Findlib, Lwt, Menhir, Cmdliner, cppo, base64.

See https://github.com/ocsigen/js_of_ocaml/blob/master/opam file for version constraints.

Optional dependencies:
  * deriving(see https://github.com/ocsigen/deriving)
  * ppx_deriving(see https://github.com/whitequark/ppx_deriving)
  * tyxml(see https://github.com/ocsigen/tyxml)
  * reactiveData(see https://github.com/ocsigen/reactiveData)
  * async_kernel(see https://github.com/janestreet/async_kernel): tested with **version 113.33.00**

== Installation ==
  * run {{{make}}} to compile everything
  * run {{{make install}}} as root to install the compiler
    and its libraries
  * run {{{make uninstall}}} as root to uninstall them

== Usage ==

  Your program must first be compiled using the OCaml bytecode
  compiler {{{ocamlc}}}.  JavaScript bindings, as well as a
  corresponding syntax extension, are provided by the
  {{{js_of_ocaml}}} package.
{{{
      ocamlfind ocamlc -package js_of_ocaml -package js_of_ocaml.ppx \
          -linkpkg -o cubes.byte cubes.ml
}}}
  Then, run the {{{js_of_ocaml}}} compiler to produce JavaScript code:
{{{
      js_of_ocaml cubes.byte
}}}

  See also the plugin <<a_api | module Ocamlbuild_js_of_ocaml >>.

== Features ==

Most of the OCaml standard library is supported. However,
  * Weak semantic cannot be implemented using JavaScript.
    A dummy implemtation is available (use `+weak.js` option)
  * Most of Sys module is not supported.

Extra libraries distributed with Ocaml (such as Thread or Str) are not
supported in general. However,
  * Bigarray: bigarray are supported using Typed Arrays
  * Num: supported using `+nat.js` option
  * Graphics: partially supported using canvas (see also js_of_ocaml.graphics)
  * Unix: time related functions are supported

Tail call is not optimized in general. However, mutually recursive
functions are optimized:
  * self recursive functions (when the tail calls are the function itself) are
    compiled using a loop.
  * trampolines are used otherwise.
<<a_manual chapter="tailcall" |More about tail call optimization>>.

Data representation differs from the usual one. Most notably,
integers are 32 bits (rather than 31 bits or 63 bits), wich is their
natural size in JavaScript, and floats are not boxed.  As a
consequence, marshalling, polymorphic comparison, and hashing
functions can yield results different from usual:
  * marshalling of floats is not supported (unmarshalling works);
  * the polymorphic hash function will not give the same results on
    datastructures containing floats;
  * these functions may be more prone to stack overflow.

== Contents of the distribution ==

|    LICENSE     |   license and copyright notice                   |
|    README      |   this file                                      |
|    compiler/   |   compiler                                       |
|    examples/   |   small examples                                 |
|    lib/        |   library for interfacing with JavaScript APIs   |
|    runtime/    |   runtime system                                 |


== Debugging programs ==

To help debugging your programs, use the "-pretty" and "-noinline"
options of Js_of_ocaml. If the bytecode is build with ocaml "-g"
option, Js_of_ocaml will attempt to preserve variable names as well.
You can also use {{{Js.debugger()}}} which inserts a JavaScript {{{debugger}}}
statement. When the JavaScript debugger is active, this statement
pauses the execution of the program.
<<a_manual chapter="debug" |More about debugging with Js_of_ocaml>>.
